name: Mobile CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      is-release: ${{ steps.check.outputs.is-release }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/staging" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  build-web:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/

  build-android:
    runs-on: ubuntu-latest
    needs: [test, build-web]
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/

      - name: Add Android platform
        run: npx cap add android

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Build Android Debug APK
        if: needs.setup.outputs.is-release != 'true'
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Build Android Release APK
        if: needs.setup.outputs.is-release == 'true'
        run: |
          cd android
          ./gradlew assembleRelease
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/**/*.apk

  build-ios:
    runs-on: macos-latest
    needs: [test, build-web]
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: npm ci

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/

      - name: Add iOS platform
        run: npx cap add ios

      - name: Sync Capacitor
        run: npx cap sync ios

      - name: Build iOS Debug
        if: needs.setup.outputs.is-release != 'true'
        run: |
          cd ios
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Debug -destination generic/platform=iOS -archivePath App.xcarchive archive

      - name: Build iOS Release
        if: needs.setup.outputs.is-release == 'true'
        run: |
          cd ios
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS -archivePath App.xcarchive archive
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

      - name: Export iOS Archive
        if: needs.setup.outputs.is-release == 'true'
        run: |
          cd ios
          xcodebuild -exportArchive -archivePath App.xcarchive -exportPath build -exportOptionsPlist exportOptions.plist

      - name: Upload iOS IPA
        if: needs.setup.outputs.is-release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa

  deploy-testflight:
    runs-on: macos-latest
    needs: [setup, build-ios]
    if: needs.setup.outputs.should-deploy == 'true' && github.ref == 'refs/heads/staging'
    steps:
      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa

      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app --type ios --file *.ipa --username "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_PASSWORD }}"

  deploy-play-console:
    runs-on: ubuntu-latest
    needs: [setup, build-android]
    if: needs.setup.outputs.should-deploy == 'true' && github.ref == 'refs/heads/staging'
    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk

      - name: Upload to Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.keysay.app
          releaseFiles: '**/*.apk'
          track: internal

  deploy-production:
    runs-on: ubuntu-latest
    needs: [setup, build-android, build-ios]
    if: needs.setup.outputs.is-release == 'true'
    environment: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Deploy to App Store
        run: |
          xcrun altool --upload-app --type ios --file ios-ipa/*.ipa --username "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_PASSWORD }}"

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.keysay.app
          releaseFiles: android-apk/**/*.apk
          track: production

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-testflight, deploy-play-console]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          elif [[ "${{ needs.deploy-testflight.result }}" == "success" ]] || [[ "${{ needs.deploy-play-console.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Deployment failed"
          fi