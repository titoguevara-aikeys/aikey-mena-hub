openapi: 3.0.1
info:
  title: Keys Pay Aggregator API
  description: |
    Dubai DED compliant aggregator platform for virtual assets and financial services.
    
    **License**: AIKEYS (Dubai DED License 1483958, CR 2558995)
    **Reference**: DED-12345
    
    Keys Pay operates as a non-custodial aggregator. All services are provided by regulated third-party providers.
  version: 1.0.0
  contact:
    name: Keys Pay Support
    url: https://keys-pay.com/support
    email: support@keys-pay.com

servers:
  - url: https://keys-pay.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - bearerAuth: []
  - hmacAuth: []

paths:
  /health:
    get:
      summary: Health Check
      description: Returns the current health status of the API and enabled providers
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "keyspay"
                  version:
                    type: string
                    example: "1.0.0"
                  providers:
                    type: object
                    properties:
                      ramp:
                        type: boolean
                      nium:
                        type: boolean
                      openpayd:
                        type: boolean

  /providers:
    get:
      summary: Provider Status
      description: Get real-time status of integrated providers
      security: []
      responses:
        '200':
          description: Provider statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: object
                  timestamp:
                    type: string
                  disclaimer:
                    type: string

  /ramp/session:
    post:
      summary: Create Ramp Session
      description: Create a buy/sell session with Ramp (on/off-ramp)
      tags: [Ramp]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fiatCurrency, fiatAmount, asset, country]
              properties:
                fiatCurrency:
                  type: string
                  example: "AED"
                fiatAmount:
                  type: number
                  example: 500
                asset:
                  type: string
                  example: "BTC"
                country:
                  type: string
                  example: "AE"
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider:
                    type: string
                    example: "RAMP"
                  sessionId:
                    type: string
                  checkoutUrl:
                    type: string
                  disclaimer:
                    type: string
        '403':
          description: Ramp is disabled
        '401':
          description: Authentication failed

  /payouts/quote:
    post:
      summary: Get Payout Quote
      description: Request an FX quote for cross-border payouts via Nium
      tags: [Nium Payouts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sourceCurrency, targetCurrency, amount]
              properties:
                sourceCurrency:
                  type: string
                  example: "AED"
                targetCurrency:
                  type: string
                  example: "USD"
                amount:
                  type: number
                  example: 1000
      responses:
        '200':
          description: Quote generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  quoteId:
                    type: string
                  rate:
                    type: number
                  fee:
                    type: number
                  ttlSeconds:
                    type: integer
                  disclaimer:
                    type: string
        '403':
          description: Nium is disabled

  /payouts/execute:
    post:
      summary: Execute Payout
      description: Execute a cross-border payout using a Nium quote
      tags: [Nium Payouts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quoteId, reference]
              properties:
                quoteId:
                  type: string
                reference:
                  type: string
                  maxLength: 100
                metadata:
                  type: object
      responses:
        '200':
          description: Payout executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider:
                    type: string
                  ref:
                    type: string
                  status:
                    type: string
                    enum: [processing, completed, failed]
                  disclaimer:
                    type: string

  /cards/issue:
    post:
      summary: Issue Card
      description: Issue a new card via Nium
      tags: [Nium Cards]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  example: "virtual"
      responses:
        '200':
          description: Card issued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardId:
                    type: string
                  last4:
                    type: string
                  activationUrl:
                    type: string
                  disclaimer:
                    type: string

  /cards/controls:
    post:
      summary: Card Controls
      description: Update card controls and limits
      tags: [Nium Cards]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: string
                controls:
                  type: object
      responses:
        '200':
          description: Controls updated successfully

  /openpayd/accounts/apply:
    post:
      summary: Apply for eIBAN (Coming Soon)
      description: Apply for a virtual IBAN via OpenPayd
      tags: [OpenPayd]
      responses:
        '403':
          description: OpenPayd is currently disabled
        '501':
          description: Coming Soon

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    hmacAuth:
      type: apiKey
      in: header
      name: x-signature
      description: HMAC authentication using x-signature and x-timestamp headers